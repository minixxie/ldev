#!/bin/bash

# Reference: https://github.com/minixxie/ldev

if [ "$(which yq)" == "" ]; then
    echo >&2 "WARN: yq command is missing, please install with 'pip3 isntall yq'."
fi
if [ "$(which kubectl)" == "" ]; then
    echo >&2 "WARN: kubectl command is missing, please install it accordingly."
fi

ldevRoot="$HOME/.ldev"
k8sProj="k8s-services"

mysql="infra-mysql@8.2.0"
pgsql="infra-pgsql@15.1.0"
redis="infra-redis-cluster"
mongo="infra-mongodb@7.0.5"
ollama="ai-ollama"

function help() {
    cat <<EOF
Usage: $0 arg1 arg2 arg3 ...
Arguments:"
├─ help.....show this help message
│  ├─ k8s...show help message for argument 'k8s'
│  └─ gpu...show help message for argument 'gpu'
├─ install..download & install the 'ldev' script, upgrade if already exists
├─ k8s......get/up/down for k8s with colima/k3s
│  ├─ get...get info of k8s
│  ├─ up....start k8s
│  ├─ down..stop k8s
│  └─ redo..recreate k8s
├─ gpu......get/up/down for nvidia gpu operator
│  ├─ get...get info of nvidia gpu operator
│  ├─ up....start nvidia gpu operator
│  └─ down..stop nvidia gpu operator
├─ mysql....get/up/down for mysql
│  ├─ get...get info of mysql
│  ├─ up....start mysql
│  ├─ down..stop mysql
│  └─ cli...invoke mysql cli
├─ pgsql....get/up/down for pgsql
│  ├─ get...get info of pgsql
│  ├─ up....start pgsql
│  ├─ down..stop pgsql
│  └─ cli...invoke pgsql cli
├─ redis....get/up/down for redis-cluster
│  ├─ get...get info of redis-cluster
│  ├─ up....start redis-cluster
│  ├─ down..stop redis-cluster
│  └─ cli...invoke redis-cluster cli
├─ mongo....get/up/down for mongodb
│  ├─ get...get info of mongodb
│  ├─ up....start mongodb
│  ├─ down..stop mongodb
│  └─ cli...invoke mongodb cli
├─ ollama...get/up/down for ollama
│  ├─ get...get info of ollama
│  ├─ up....start ollama
│  ├─ down..stop ollama
│  └─ test..test ollama
├─ init.....initialize ldev.yaml for the application in the current folder
├─ get......get info for the application in the current folder (check for kustomization/ folder)
├─ up.......start the application in the current folder (check for kustomization/ folder)
├─ down.....stop the application in the current folder (check for kustomization/ folder)
├─ logs.....tail the logs of the application in the current folder (check for kustomization/ folder)
├─ exec.....exec shell into the pod of the application in the current folder
EOF
}

function install() {
	sudo curl -sSL https://raw.githubusercontent.com/minixxie/ldev/refs/heads/main/ldev | \
	sudo tee /usr/local/bin/ldev.new > /dev/null \
	&& sudo chmod 755 /usr/local/bin/ldev.new \
	&& sudo mv -f /usr/local/bin/ldev.new /usr/local/bin/ldev
}

function bootstrap() {
    if ! [ -d "$ldevRoot" ]; then
        mkdir -p "$ldevRoot"
        chmod 700 "$ldevRoot"
    fi
    if ! [ -d "$ldevRoot"/"$k8sProj" ]; then
        cd "$ldevRoot" && git clone --depth 1 https://github.com/minixxie/k8s-services.git > /dev/null
    fi
    cd "$ldevRoot"/"$k8sProj" && git pull --rebase > /dev/null
}

function k8s_get() {
    echo "# kubectl get node -o wide"
    kubectl get node -o wide
    echo ""
    echo "# kubectl get ns"
    kubectl get ns
}

function k8s_up() {
    bootstrap
    echo >&2 "ERR: Not yet implemented."
    exit 1
}

function k8s_down() {
    bootstrap
    echo >&2 "ERR: Not yet implemented."
    exit 1
}

function k8s_redo() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj" && make -s k8s-redo
}

function gpu_get() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/nvidia-gpu-operator && make get
}
function gpu_up() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/nvidia-gpu-operator && make img local wait test
}
function gpu_down() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/nvidia-gpu-operator && make down
}
function mysql_get() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$mysql" && make get
}
function mysql_up() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$mysql" && make img local wait test
}
function mysql_down() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$mysql" && make down
}
function mysql_cli() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$mysql" && make cli
}
function pgsql_get() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$pgsql" && make get
}
function pgsql_up() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$pgsql" && make img local wait test
}
function pgsql_down() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$pgsql" && make down
}
function pgsql_cli() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$pgsql" && make cli
}
function redis_get() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$redis" && make get
}
function redis_up() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$redis" && make img local wait test
}
function redis_down() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$redis" && make down
}
function redis_cli() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$redis" && make cli
}
function mongo_get() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$mongo" && make get
}
function mongo_up() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$mongo" && make img local wait test
}
function mongo_down() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$mongo" && make down
}
function mongo_cli() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$mongo" && make cli
}
function ollama_get() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$ollama" && make get
}
function ollama_up() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$ollama" && make img local wait test
}
function ollama_down() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$ollama" && make down
}
function ollama_test() {
    bootstrap
    cd "$ldevRoot"/"$k8sProj"/"$ollama" && make test
}

function yaml_read_app() {
    init
    app=$(yq -r '.ldev.app' < ldev.yaml)
    if [ "$app" == "" ]; then
        echo >&2 "ERR: ldev.app is missing in ldev.yaml"
        exit 1
    fi
    echo "$app"
}
function yaml_read_java() {
    init
    httpPort=$(yq -r '.ldev.java.httpPort' < ldev.yaml)
    if [ x"$httpPort" == "" ]; then
        httpPort=8080
    fi
    actuatorPort=$(yq -r '.ldev.java.actuatorPort' < ldev.yaml)
    if [ x"$actuatorPort" == "" ]; then
        actuatorPort=8081
    fi
    actuatorReadinessPath=$(yq -r '.ldev.java.actuatorReadinessPath' < ldev.yaml)
    if [ x"$actuatorReadinessPath" == "" ]; then
        actuatorReadinessPath=/actuator/health/readiness
    fi
    springProfilesActive=$(yq -r '.ldev.java.springProfilesActive' < ldev.yaml)
    if [ x"$springProfilesActive" == "" ]; then
        springProfilesActive=localk8s
    fi

    # sample: "8080\t8081\t/actuator/health/readiness\tlocalk8s"
    echo "$httpPort	$actuatorPort	$actuatorReadinessPath	$springProfilesActive"
}

function gen_jdk_containerfile() {

    if ! [ -f ./Containerfile ]; then
        javaConfig=$(yaml_read_java)
        httpPort=$(echo -n "$javaConfig" | cut -f 1)
        actuatorPort=$(echo -n "$javaConfig" | cut -f 2)
        cat <<EOF > ./Containerfile
FROM openjdk:8-jdk as jdk

ARG APP

WORKDIR /app

EOF

        if [ -f build.gradle ]; then
cat <<EOF >> ./Containerfile
ADD ./gradle ./gradle
ADD ./gradlew ./

RUN ./gradlew wrapper --gradle-version=7.6.2

ADD . .
RUN ./gradlew bootJar --no-daemon -x test

EOF
        fi

cat <<EOF >> ./Containerfile
FROM minixxie/eclipse-temurin:21.0.2_13-jre

ARG APP
ENV APP=\${APP}

COPY --from=jdk /app/build/libs/*.jar /app.jar
RUN /update-tz.sh

EXPOSE $httpPort
EXPOSE $actuatorPort
EXPOSE 9999
EOF
    fi

}

function gen_containerfile() {
    if ! [ -f Containerfile ]; then
        if ! [ -f Dockerfile ]; then
            # Java/Kotlin
            if [ -f build.gradle -o -f pom.xml ]; then
                gen_jdk_containerfile
		echo Containerfile
            fi
        else
            echo Dockerfile
        fi
    else
        echo Containerfile
    fi
}

function init() {
    if [ ! -f ldev.yaml ]; then
        folderName=$(basename $(pwd))
        cat <<EOF > ldev.yaml
ldev:
  app: $folderName
#  java:
#    httpPort: 8080
#    actuatorPort: 8081
#    actuatorReadinessPath: /actuator/health/readiness
#    springProfilesActive: localk8s  # requires ./src/main/resources/application-localk8s.yml
EOF
    fi
}

function yaml_read_ns() {
    ns=
    if [ -f "kustomization/base/namespace.yaml" ]; then
        ns=$(grep "name:" kustomization/base/namespace.yaml | cut -f 2 -d: | sed 's/^[[:space:]]*//' | sed 's/[[:space:]]*$//')
    fi
    if [ "$ns" == "" ]; then
        ns=$(yaml_read_app)
    fi
    echo $ns
}

function get() {
    ns=$(yaml_read_ns)
    if [ -d "kustomization" ]; then
        if [ -d "kustomization/overlays/local" ]; then
            kubectl get -k ./kustomization/overlays/local
        else
            kubectl get -k ./kustomization/base
        fi
    fi
    echo ""
    kubectl -n $ns get pod
}
function build() {
    if [ -f Makefile ]; then
        grep "^build:" Makefile > /dev/null
        if [ $? -eq 0 ]; then
            make build  # assuming Makefile is there and build target is there for building docker image
            return 0
	fi
    fi
    echo >&2 "WARN: Makefile and the target 'build:' (to use nerdctl to build the container image) are not there."
    echo >&2 "      Auto-generate for it..."
    init
    containerfile=$(gen_containerfile)
    app=$(yaml_read_app)
    nerdctl --namespace=k8s.io build . -f $containerfile -t local/$app:dont_push --build-arg APP=$app
    nerdctl --namespace=k8s.io images | grep local/$app | grep dont_push
}

function up() {
    build
    if ! [ -d "kustomization" ]; then
        echo >&2 "WARN: kustomization/ folder not found."
        echo >&2 "      Auto-generate for it..."
        mkdir -p ./kustomization
        mkdir -p ./kustomization/base
        mkdir -p ./kustomization/overlays
        mkdir -p ./kustomization/overlays/local
        app=$(yaml_read_app)
        port=80
        cat <<EOF > ./kustomization/base/kustomization.yaml
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
  - namespace.yaml
  - deployment.yaml
  - service.yaml
  - ingress.yaml
EOF
        cat <<EOF > ./kustomization/base/namespace.yaml
kind: Namespace
apiVersion: v1
metadata:
  name: $app
EOF
        javaConfig=$(yaml_read_java)
	httpPort=$(echo -n "$javaConfig" | cut -f 1)
	actuatorPort=$(echo -n "$javaConfig" | cut -f 2)
	actuatorReadinessPath=$(echo -n "$javaConfig" | cut -f 3)
	springProfilesActive=$(echo -n "$javaConfig" | cut -f 4)
        cat <<EOF > ./kustomization/base/deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: $app
  namespace: $app
spec:
  replicas: 1
  selector:
    matchLabels:
      app: $app
  template:
    metadata:
      labels:
        app: $app
    spec:
      containers:
        - name: java
          image: local/$app:dont_push
          imagePullPolicy: IfNotPresent
          command:
            - /bin/bash
            - -c
            - |
              /update-tz.sh
              java --add-opens java.base/java.lang=ALL-UNNAMED -jar /app.jar
          ports:
            - name: http
              containerPort: $httpPort  # spring boot HTTP port
EOF
        if [ "$actuatorPort" != "$httpPort" ]; then
        cat <<EOF >> ./kustomization/base/deployment.yaml
            - name: http-metrics
              containerPort: $actuatorPort  # spring boot actuator HTTP port
EOF
        fi
        cat <<EOF >> ./kustomization/base/deployment.yaml
            - name: xxljob
              containerPort: 9999  # xxl-job HTTP port
          readinessProbe:
            httpGet:
              path: $actuatorReadinessPath
              port: $actuatorPort
            initialDelaySeconds: 10
            periodSeconds: 30
          env:
            - name: app
              value: $app
            - name: SPRING_PROFILES_ACTIVE
              value: $springProfilesActive
            - name: HOST_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.hostIP
EOF
        cat <<EOF > ./kustomization/base/service.yaml
apiVersion: v1
kind: Service
metadata:
  name: $app
  namespace: $app
spec:
  selector:
    app: $app
  type: LoadBalancer
  ports:
    - name: http
      protocol: TCP
      port: $httpPort
      targetPort: $httpPort
EOF
        cat <<EOF > ./kustomization/base/ingress.yaml
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: $app
  namespace: $app
spec:
  rules:
    - host: $app.local
      http:
        paths:
          - pathType: Prefix
            path: "/"
            backend:
              service:
                name: $app
                port:
                  number: $httpPort
EOF
        cat <<EOF > ./kustomization/overlays/local/kustomization.yaml
apiVersion: kustomize.config.k8s.io/v1beta1
kind: Kustomization
resources:
  - ../../base
EOF
    fi

    if [ -d "kustomization/overlays/local" ]; then
        kubectl apply -k ./kustomization/overlays/local
    else
        kubectl apply -k ./kustomization/base
    fi
}

function down() {
    if [ -d "kustomization" ]; then
        if [ -d "kustomization/overlays/local" ]; then
            kubectl delete -k ./kustomization/overlays/local
        else
            kubectl delete -k ./kustomization/base
        fi
    fi
}

function logs() {
    ns=$(yaml_read_ns)
    kubectl -n "$ns" logs -f $(kubectl -n "$ns" get pod | sed 1d | awk '{print $1}')
}
function pod_shell() {
    ns=$(yaml_read_ns)
    kubectl -n "$ns" exec -it $(kubectl -n "$ns" get pod | sed 1d | awk '{print $1}') -- sh -c 'bash || sh'
}

if [ "$1" == "" ]; then
    help
elif [ "$1" == "help" ]; then
    if [ "$2" == "k8s" ]; then
        help
    else
        help
	exit 1
    fi
elif [ "$1" == "install" ]; then
    install
elif [ "$1" == "k8s" ]; then
    if [ "$2" == "get" ]; then
        k8s_get
    elif [ "$2" == "up" ]; then
        k8s_up
    elif [ "$2" == "down" ]; then
        k8s_down
    elif [ "$2" == "redo" ]; then
        k8s_redo
    else
        help
	exit 1
    fi
elif [ "$1" == "gpu" ]; then
    if [ "$2" == "get" ]; then
        gpu_get
    elif [ "$2" == "up" ]; then
        gpu_up
    elif [ "$2" == "down" ]; then
        gpu_down
    else
        help
    fi
elif [ "$1" == "mysql" ]; then
    if [ "$2" == "get" ]; then
        mysql_get
    elif [ "$2" == "up" ]; then
        mysql_up
    elif [ "$2" == "down" ]; then
        mysql_down
    elif [ "$2" == "cli" ]; then
        mysql_cli
    else
        help
    fi
elif [ "$1" == "pgsql" ]; then
    if [ "$2" == "get" ]; then
        pgsql_get
    elif [ "$2" == "up" ]; then
        pgsql_up
    elif [ "$2" == "down" ]; then
        pgsql_down
    elif [ "$2" == "cli" ]; then
        pgsql_cli
    else
        help
    fi
elif [ "$1" == "redis" ]; then
    if [ "$2" == "get" ]; then
        redis_get
    elif [ "$2" == "up" ]; then
        redis_up
    elif [ "$2" == "down" ]; then
        redis_down
    elif [ "$2" == "cli" ]; then
        redis_cli
    else
        help
    fi
elif [ "$1" == "mongo" ]; then
    if [ "$2" == "get" ]; then
        mongo_get
    elif [ "$2" == "up" ]; then
        mongo_up
    elif [ "$2" == "down" ]; then
        mongo_down
    elif [ "$2" == "cli" ]; then
        mongo_cli
    else
        help
    fi
elif [ "$1" == "ollama" ]; then
    if [ "$2" == "get" ]; then
        ollama_get
    elif [ "$2" == "up" ]; then
        ollama_up
    elif [ "$2" == "down" ]; then
        ollama_down
    elif [ "$2" == "test" ]; then
        ollama_test
    else
        help
    fi
elif [ "$1" == "init" ]; then
    init
elif [ "$1" == "get" ]; then
    get
elif [ "$1" == "build" ]; then
    build
elif [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
elif [ "$1" == "logs" ]; then
    logs 
elif [ "$1" == "exec" ]; then
    pod_shell
else
    help
    exit 1
fi
