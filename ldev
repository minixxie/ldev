#!/bin/bash

# Reference: https://github.com/minixxie/ldev

if [ "$(which yq)" == "" ]; then
    echo >&2 "WARN: yq command is missing, please install with 'pip3 isntall yq'."
fi
if [ "$(which kubectl)" == "" ]; then
    echo >&2 "WARN: kubectl command is missing, please install it accordingly."
fi

ldevRoot="$HOME/.ldev"
k8sProj="k8s-services"
mysql="infra-mysql@8.2.0"
pgsql="infra-pgsql@15.1.0"
redis="infra-redis-cluster"
mongo="infra-mongodb@7.0.5"
ollama="ai-ollama"

function help() {
    cat <<EOF
Usage: $0 arg1 arg2 arg3 ...
Arguments:"
├─ help.....show this help message
│  ├─ k8s...show help message for argument 'k8s'
│  └─ gpu...show help message for argument 'gpu'
├─ install..download & install the 'ldev' script, upgrade if already exists
├─ init.....initialize files for ldev to use under $ldevRoot
├─ k8s......get/up/down for k8s with colima/k3s
│  ├─ get...get info of k8s
│  ├─ up....start k8s
│  ├─ down..stop k8s
│  └─ redo..recreate k8s
├─ gpu......get/up/down for nvidia gpu operator
│  ├─ get...get info of nvidia gpu operator
│  ├─ up....start nvidia gpu operator
│  └─ down..stop nvidia gpu operator
├─ mysql....get/up/down for mysql
│  ├─ get...get info of mysql
│  ├─ up....start mysql
│  ├─ down..stop mysql
│  └─ cli...invoke mysql cli
├─ pgsql....get/up/down for pgsql
│  ├─ get...get info of pgsql
│  ├─ up....start pgsql
│  ├─ down..stop pgsql
│  └─ cli...invoke pgsql cli
├─ redis....get/up/down for redis-cluster
│  ├─ get...get info of redis-cluster
│  ├─ up....start redis-cluster
│  ├─ down..stop redis-cluster
│  └─ cli...invoke redis-cluster cli
├─ mongo....get/up/down for mongodb
│  ├─ get...get info of mongodb
│  ├─ up....start mongodb
│  ├─ down..stop mongodb
│  └─ cli...invoke mongodb cli
├─ ollama...get/up/down for ollama
│  ├─ get...get info of ollama
│  ├─ up....start ollama
│  ├─ down..stop ollama
│  └─ test..test ollama
├─ get......get info for the application in the current folder (check for kustomization/ folder)
├─ up.......start the application in the current folder (check for kustomization/ folder)
├─ down.....stop the application in the current folder (check for kustomization/ folder)
EOF
}

function install() {
	sudo curl -sSL https://raw.githubusercontent.com/minixxie/ldev/refs/heads/main/ldev | \
	sudo tee /usr/local/bin/ldev > /dev/null \
	&& sudo chmod 755 /usr/local/bin/ldev
}

function init() {
    if ! [ -d "$ldevRoot" ]; then
        mkdir -p "$ldevRoot"
        chmod 700 "$ldevRoot"
    fi
    if ! [ -d "$ldevRoot"/"$k8sProj" ]; then
        cd "$ldevRoot" && git clone --depth 1 https://github.com/minixxie/k8s-services.git > /dev/null
    fi
    cd "$ldevRoot"/"$k8sProj" && git pull --rebase

    echo "OK"
}
function check_init() {
    if ! [ -d "$ldevRoot" ]; then
        echo >&2 "ERR: please run this first: $0 init"
	exit 1
    fi
    if ! [ -d "$ldevRoot"/"$k8sProj" ]; then
        echo >&2 "ERR: please run this first: $0 init"
	exit 1
    fi
}

function k8s_get() {
    echo "# kubectl get node -o wide"
    kubectl get node -o wide
    echo ""
    echo "# kubectl get ns"
    kubectl get ns
}

function k8s_up() {
    true
}

function k8s_down() {
    true
}

function k8s_redo() {
    check_init
    cd "$ldevRoot"/"$k8sProj" && make -s k8s-redo
}

function gpu_get() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/nvidia-gpu-operator && make get
}
function gpu_up() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/nvidia-gpu-operator && make img local wait test
}
function gpu_down() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/nvidia-gpu-operator && make down
}
function mysql_get() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$mysql" && make get
}
function mysql_up() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$mysql" && make img local wait test
}
function mysql_down() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$mysql" && make down
}
function mysql_cli() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$mysql" && make cli
}
function pgsql_get() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$pgsql" && make get
}
function pgsql_up() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$pgsql" && make img local wait test
}
function pgsql_down() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$pgsql" && make down
}
function pgsql_cli() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$pgsql" && make cli
}
function redis_get() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$redis" && make get
}
function redis_up() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$redis" && make img local wait test
}
function redis_down() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$redis" && make down
}
function redis_cli() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$redis" && make cli
}
function mongo_get() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$mongo" && make get
}
function mongo_up() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$mongo" && make img local wait test
}
function mongo_down() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$mongo" && make down
}
function mongo_cli() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$mongo" && make cli
}
function ollama_get() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$ollama" && make get
}
function ollama_up() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$ollama" && make img local wait test
}
function ollama_down() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$ollama" && make down
}
function ollama_test() {
    check_init
    cd "$ldevRoot"/"$k8sProj"/"$ollama" && make test
}

function read_app() {
    if [ ! -f ldev.yaml ]; then
        folderName=$(basename $(pwd))
        cat <<EOF > ldev.yaml
ldev:
  app: $folderName
EOF
    fi
    app=$(yq -r '.ldev.app' < ldev.yaml)
    if [ "$app" == "" ]; then
        echo >&2 "ERR: ldev.app is missing in ldev.yaml"
        exit 1
    fi
    echo "$app"
}

function gen_jdk_containerfile() {

    if ! [ -f ./.ldev/Containerfile ]; then
        mkdir -p ./.ldev/
        cat <<EOF > ./.ldev/Containerfile
FROM openjdk:8-jdk as jdk

ARG APP

WORKDIR /app

EOF

        if [ -f build.gradle ]; then
cat <<EOF >> ./.ldev/Containerfile
ADD ./gradle ./gradle
ADD ./gradlew ./

RUN ./gradlew wrapper --gradle-version=7.6.2

ADD . .
RUN ./gradlew bootJar --no-daemon -x test

EOF
        fi

cat <<EOF >> ./.ldev/Containerfile
FROM minixxie/eclipse-temurin:21.02_13-jre

ARG APP
ENV APP=\${APP}

COPY --from=jdk /app/build/libs/*.jar /app.jar
RUN /update-tz.sh

EXPOSE 8080
EXPOSE 9999
EOF
    fi

}

function gen_containerfile() {
    if ! [ -f Containerfile ]; then
        if ! [ -f Dockerfile ]; then
            echo "GENERATE"
            # Java/Kotlin
            if [ -f build.gradle -o -f pom.xml ]; then
                gen_jdk_containerfile
		echo ./.ldev/Containerfile
            fi
        else
            echo Dockerfile
        fi
    else
        echo Containerfile
    fi
}

function get() {
    check_init
    #app=$(read_app)
    if [ -d "kustomization" ]; then
        if [ -d "kustomization/overlays/local" ]; then
            kubectl get -k ./kustomization/overlays/local
        else
            kubectl get -k ./kustomization/base
        fi
    fi
}
function build() {
    check_init
    if [ -f Makefile ]; then
        grep "^build:" Makefile > /dev/null
        if [ $? -eq 0 ]; then
            make build  # assuming Makefile is there and build target is there for building docker image
            return 0
	fi
    fi
    echo >&2 "WARN: Makefile and the target 'build:' (to use nerdctl to build the container image) are not there."
    echo >&2 "      Auto-generate for it..."
    containerfile=$(gen_containerfile)
    app=$(read_app)
    nerdctl --namespace=k8s.io build . -f $containerfile -t local/$app:dont_push --build-arg APP=$app
}

function up() {
    check_init
    build
    if [ -d "kustomization" ]; then
        if [ -d "kustomization/overlays/local" ]; then
            kubectl apply -k ./kustomization/overlays/local
        else
            kubectl apply -k ./kustomization/base
        fi
    fi
}
function down() {
    check_init
    if [ -d "kustomization" ]; then
        if [ -d "kustomization/overlays/local" ]; then
            kubectl delete -k ./kustomization/overlays/local
        else
            kubectl delete -k ./kustomization/base
        fi
    fi
}

if [ "$1" == "" ]; then
    help
elif [ "$1" == "help" ]; then
    if [ "$2" == "k8s" ]; then
        help
    else
        help
	exit 1
    fi
elif [ "$1" == "install" ]; then
    install
elif [ "$1" == "init" ]; then
    init
elif [ "$1" == "k8s" ]; then
    if [ "$2" == "get" ]; then
        k8s_get
    elif [ "$2" == "up" ]; then
        k8s_up
    elif [ "$2" == "down" ]; then
        k8s_down
    elif [ "$2" == "redo" ]; then
        k8s_redo
    else
        help
	exit 1
    fi
elif [ "$1" == "gpu" ]; then
    if [ "$2" == "get" ]; then
        gpu_get
    elif [ "$2" == "up" ]; then
        gpu_up
    elif [ "$2" == "down" ]; then
        gpu_down
    else
        help
    fi
elif [ "$1" == "mysql" ]; then
    if [ "$2" == "get" ]; then
        mysql_get
    elif [ "$2" == "up" ]; then
        mysql_up
    elif [ "$2" == "down" ]; then
        mysql_down
    elif [ "$2" == "cli" ]; then
        mysql_cli
    else
        help
    fi
elif [ "$1" == "pgsql" ]; then
    if [ "$2" == "get" ]; then
        pgsql_get
    elif [ "$2" == "up" ]; then
        pgsql_up
    elif [ "$2" == "down" ]; then
        pgsql_down
    elif [ "$2" == "cli" ]; then
        pgsql_cli
    else
        help
    fi
elif [ "$1" == "redis" ]; then
    if [ "$2" == "get" ]; then
        redis_get
    elif [ "$2" == "up" ]; then
        redis_up
    elif [ "$2" == "down" ]; then
        redis_down
    elif [ "$2" == "cli" ]; then
        redis_cli
    else
        help
    fi
elif [ "$1" == "mongo" ]; then
    if [ "$2" == "get" ]; then
        mongo_get
    elif [ "$2" == "up" ]; then
        mongo_up
    elif [ "$2" == "down" ]; then
        mongo_down
    elif [ "$2" == "cli" ]; then
        mongo_cli
    else
        help
    fi
elif [ "$1" == "ollama" ]; then
    if [ "$2" == "get" ]; then
        ollama_get
    elif [ "$2" == "up" ]; then
        ollama_up
    elif [ "$2" == "down" ]; then
        ollama_down
    elif [ "$2" == "test" ]; then
        ollama_test
    else
        help
    fi
elif [ "$1" == "get" ]; then
    get
elif [ "$1" == "up" ]; then
    up
elif [ "$1" == "down" ]; then
    down
else
    help
    exit 1
fi
